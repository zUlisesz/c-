#include <iostream>
#include <string>
using namespace std;

struct Contacto {
    string nombre;
    string numero;
    Contacto* siguiente; 
};

int menu() {
    int opcion;
    cout << "\n---- AGENDA ----\n";
    cout << "1) Agregar contacto\n";
    cout << "2) Ver contactos\n";
    cout << "3) Buscar contacto\n";
    cout << "4) Eliminar contacto\n";
    cout << "5) Salir\n";
    cout << "Que operacion desea realizar? ";
    cin >> opcion;
    return opcion;
}


void agregar_contacto(Contacto*& cabeza) {
    Contacto* nuevo = new Contacto;
    cout << "Nombre del contacto: ";
    cin.ignore();
    getline(cin, nuevo->nombre);
    cout << "Numero del contacto: ";
    cin >> nuevo->numero;
    nuevo->siguiente = cabeza; //aptai
    cabeza = nuevo; // ai
    cout << "Contacto agregado exitosamente.\n";
}

void ver_contactos(Contacto* cabeza) {
    cout << "\n--- Agenda ---\n";
    if (!cabeza) {
        cout << "No hay contactos guardados.\n";
        return;
    }
    Contacto* actual = cabeza;
    while (actual) {
        cout << "Nombre: " << actual->nombre << ", Numero: " << actual->numero << endl;
        actual = actual->siguiente;
    }
}

void buscar_contacto(Contacto* cabeza) {
    if (!cabeza) {
        cout << "La agenda está vacía.\n";
        return;
    }
    string identificador;
    cout << "Nombre o número a buscar: ";
    cin >> identificador;

    bool encontrado = false;
    Contacto* actual = cabeza;
    while (actual) {
        if (actual->nombre == identificador || actual->numero == identificador) {
            cout << "Encontrado -> Nombre: " << actual->nombre 
                 << ", Número: " << actual->numero << endl;
            encontrado = true;
        }
        actual = actual->siguiente;
    }
    if (!encontrado) {
        cout << "No se encontró el contacto.\n";
    }
}


void eliminar_toda_lista(Contacto*& cabeza) {
    while (cabeza) {
        Contacto* temp = cabeza;
        cabeza = cabeza->siguiente;
        delete temp;
    }
    cout << "Todos los contactos han sido eliminados.\n";
}


void eliminar_tope(Contacto*& cabeza) {
    if (!cabeza) {
        cout << "La agenda está vacía.\n";
        return;
    }
    Contacto* temp = cabeza;
    cout << "Eliminando -> " << temp->nombre << endl;
    cabeza = cabeza->siguiente;
    delete temp;
}

void eliminar_fondo(Contacto*& cabeza) {
    if (!cabeza) {
        cout << "La agenda está vacía.\n";
        return;
    }
    if (!cabeza->siguiente) { 
        cout << "Eliminando -> " << cabeza->nombre << endl;
        delete cabeza;
        cabeza = nullptr;
        return;
    }
    Contacto* actual = cabeza;
    while (actual->siguiente->siguiente) {
        actual = actual->siguiente;
    }
    cout << "Eliminando -> " << actual->siguiente->nombre << endl;
    delete actual->siguiente;
    actual->siguiente = nullptr;
}

void eliminar_contacto(Contacto*& cabeza) {
    if (!cabeza) {
        cout << "La agenda está vacía.\n";
        return;
    }
    string identificador;
    cout << "Nombre o número a eliminar: ";
    cin >> identificador;
    
    if (cabeza->nombre == identificador || cabeza->numero == identificador) {
        eliminar_tope(cabeza);
        return;
    }
    
    Contacto* actual = cabeza;
    while (actual->siguiente) {
        if (actual->siguiente->nombre == identificador || actual->siguiente->numero == identificador) {
            Contacto* temp = actual->siguiente;
            cout << "Eliminando -> " << temp->nombre << endl;
            actual->siguiente = temp->siguiente;
            delete temp;
            return;
        }
        actual = actual->siguiente;
    }
    cout << "No se encontró el contacto.\n";
}

void menu_eliminar(Contacto*& cabeza) {
    int subopcion;
    cout << "\n--- Eliminar Contactos ---\n";
    cout << "1) Eliminar toda la lista\n";
    cout << "2) Eliminar el tope (primer contacto)\n";
    cout << "3) Eliminar el fondo (último contacto)\n";
    cout << "4) Eliminar un contacto específico\n";
    cout << "Seleccione una opción: ";
    cin >> subopcion;

    switch(subopcion) {
        case 1: eliminar_toda_lista(cabeza); break;
        case 2: eliminar_tope(cabeza); break;
        case 3: eliminar_fondo(cabeza); break;
        case 4: eliminar_contacto(cabeza); break;
        default: cout << "Opción inválida.\n";
    }
}

int main() {
    Contacto* agenda = nullptr;
    int opcion;
    do {
        opcion = menu();
        switch (opcion) {
            case 1: agregar_contacto(agenda); break;
            case 2: ver_contactos(agenda); break;
            case 3: buscar_contacto(agenda); break;
            case 4: menu_eliminar(agenda); break;
            case 5: cout << "Saliendo...\n"; break;
            default: cout << "Ingrese una opción válida.\n";
        }
    } while (opcion != 5);

    eliminar_toda_lista(agenda);

    return 0;
}
