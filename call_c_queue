//librerias principales
#include <iostream>
#include <queue>
using namespace std; // evitar eñl uso de std::

struct Persona { //estructura que almacena datos de cada persona que se forma en la fila
    string nombre;
    int turno;
};

//esta función simula el formado de una persona en la fila
void formar(queue<Persona>& fila) { // el único argumento de esta función es una cola
    Persona tempo;// Estructura temporal para almnacenar datos de la nueva persona
    
    //lectura de los datos de la nueva persona a formarse
    string nombre;
    int turno = fila.size() + 1;
    cout << "Nombre: ";
    cin >> nombre;
    
    //se asignan los datos recopilados a la estructura temporal
    tempo.nombre = nombre;
    tempo.turno = turno;
    fila.push(tempo);// se agrega la estructura temporal a la cola
    cout << "Formado en la fila" << endl;
}

//función que muestra un menú de opciones para el usuario
void menu(){
	cout << "\n--- MENU ---" << endl;
    cout << "1) Formar persona" << endl;
    cout << "2) Mostrar fila" << endl;
    cout << "3) Atender persona" << endl;
    cout << "4) Vaciar fila" << endl;
    cout << "5) Salir" << endl;
    cout << "Elige una opcion: ";
    
}

//función que muestra a todas las personas formadas
void mostrar_fila(queue<Persona>& fila) { // único argumento es una cola
    if (fila.empty()) { // primer caso, no hay nadie formado
        cout << "No hay nadie formado" << endl;
        return;
    }
    cout << "\n- - - - Miembros de la fila - - - -" << endl << endl;
    // segundo caso, la fila no esta vacía
    queue<Persona> copia = fila; // se crea una copia de la cola original
    
    //el ciclo se repetira mientras la copia de la cola no esté vacía
    while (!copia.empty()) {
        cout << "Nombre: " << copia.front().nombre
             << " - Numero de turno: " << copia.front().turno << endl; // muestra los datos del fondo de la cola
        copia.pop();  //elimina el fondo de la cola
    }
}

//función que simula atender auna persona de la fila
void atender(queue<Persona>& fila) { // único argumento es una cola
    if (fila.empty()) { // primer caso, no hay nadie formado
        cout << "La fila está vacía y no hay nadie a quien atender" << endl;
        return;
    }else{
    	//atiende a una persona por medio de eliminar el tope 
    	cout << "Atendiendo a: " << fila.front().nombre << endl;
    	fila.pop();
	}
    
}

//elimina a todos los elementos de la fila
void vaciar_cola(queue<Persona>& fila) { // único argumento es una cola

    while (!fila.empty()) { //mientras la cola no esté vacía irá eliminado el tope de la cola
        fila.pop();
    }
    cout << "La fila ha sido vaciada." << endl;
}


//esta función solo evalua la opción del usuario para poder ejecutar algo
void realizar_operacion(queue<Persona>& fila) {  // único argumento es una cola
    int opcion;
    do { // este ciclo se repetirá siempre y cuando no se presione la opción de salir
        menu() ;  // se llama a la función que muestra el menú
        
        cin >> opcion;
        
        switch (opcion) { // el argumento de este condicional será la opción insertada por el usuario
            case 1:
                formar(fila);
                break;
            case 2:
                mostrar_fila(fila);
                break;
            case 3:
                atender(fila);
                break;
            case 4:
                vaciar_cola(fila);
                break;
            case 5:
            	vaciar_cola(fila);
                cout << "Saliendo..." << endl;
                break;
            default:
                cout << "Opcion no existente." << endl;
        }
    } while (opcion != 5);
}

int main() {
    queue<Persona> fila;  // se crea una cola de personas con la que se estará trabajando
    realizar_operacion(fila); //se llama a la función que realiza todas las operaciones
    return 0;
}
